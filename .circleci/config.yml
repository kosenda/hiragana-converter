## ref: https://github.com/kosenda/hiragana-converter/blob/develop/REFERENCE.md

version: 2.1

orbs:
  slack: circleci/slack@4.13.3
  gh: circleci/github-cli@2.3.0

executors:
  android:
    docker:
      - image: cimg/android:2024.04

commands:
  check_is_skipping_vrt:
    steps:
      - gh/install
      - run:
          name: Gh login
          command: echo "$GITHUB_ACCESS_TOKEN" | gh auth login --with-token
      - run:
          name: Save IS_SKIPPING_VRT to env
          command: |
            is_skipping_vrt=false
            if [[ "$(echo $(git log -1 --pretty=%B))" == *"[skip vrt]"* ]]; then
              # Skip if the latest commit message contains [skip vrt]
              is_skipping_vrt=true
            else
              # Skip if there is no PR or if the PR has a `skip vrt` label
              if [ -z "$CIRCLE_PULL_REQUEST" ] || [ "$(gh pr view $CIRCLE_BRANCH --json labels | jq '.labels | any(.name == "skip vrt")')" = "true" ]; then
                is_skipping_vrt=true
              fi
            fi
            echo "is_skipping_vrt: $is_skipping_vrt"
            echo "export IS_SKIPPING_VRT=$is_skipping_vrt" >> $BASH_ENV

  get_screenshots:
    steps:
      - run:
          name: Save BASE_BRANCH_NAME to env
          command: |
            pr=$(echo https://api.github.com/repos/${CIRCLE_PULL_REQUEST:19} | sed "s/\/pull\//\/pulls\//")
            base=$(curl -s -H "Authorization: token ${GITHUB_ACCESS_TOKEN}" $pr | jq '.base.ref')
            echo "base: $base"
            echo "export BASE_BRANCH_NAME=${base}" >> $BASH_ENV
      - run:
          name: Save IS_EXIST_SCREENSHOTS to env
          command: |
            is_exist=false
            if [ $IS_SKIPPING_VRT = "false" ]; then
              is_exist=$(echo -n "$(git fetch origin screenshots_$BASE_BRANCH_NAME && echo true || echo false)")
            fi
            echo "is_exist: $is_exist"
            echo "export IS_EXIST_SCREENSHOTS=${is_exist}" >> $BASH_ENV
      - run:
          name: Checkout screenshots branch
          command: |
            if [ $IS_EXIST_SCREENSHOTS = "true" ]; then
              git fetch origin screenshots_$BASE_BRANCH_NAME
              git checkout screenshots_$BASE_BRANCH_NAME
            fi
      - run:
          name: Save SCREENSHOTS_TIMESTAMP to env
          command: |
            if [ $IS_EXIST_SCREENSHOTS = "false" ]; then
              echo "no-op" > timestamp
            fi
            echo "timestamp: $(cat timestamp)"
            echo "export SCREENSHOTS_TIMESTAMP=$(echo -n $(cat timestamp))" >> $BASH_ENV
      - run:
          name: Zip screenshots
          command: |
            mkdir -p ./temp/zip
            if [ $IS_EXIST_SCREENSHOTS = "true" ]; then
              zip -r ./temp/zip/screenshots.zip ./app/build/outputs/roborazzi
            fi
      - save_cache:
          paths:
            - ./temp/zip
          key: screenshots-{{ checksum "timestamp" }}
      - run:
          name: Checkout pr branch
          command: git checkout $CIRCLE_BRANCH
      - run:
          name: Restore timestamp file
          command: echo $SCREENSHOTS_TIMESTAMP > timestamp
      - restore_cache:
          key: screenshots-{{ checksum "timestamp" }}
      - run:
          name: Unzip screenshots
          command: |
            unzip ./temp/zip/screenshots.zip || true
            rm -rf ./temp || true

  set_locale_properties:
    steps:
      - run:
          name: Set local.properties
          command: |
            LOCAL_PROPERTIES_PATH=./local.properties
            echo "apiKey=$API_KEY" >> $LOCAL_PROPERTIES_PATH

  restore_and_save_gradle_cache:
    steps:
      - restore_cache:
          key: jars-{{ checksum "build.gradle.kts" }}-{{ checksum  "app/build.gradle.kts" }}-{{ checksum "gradle/libs.versions.toml" }}
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle.kts" }}-{{ checksum  "app/build.gradle.kts" }}-{{ checksum "gradle/libs.versions.toml" }}

  setup_bundle:
    steps:
      - run:
          neme: Gem install bundler
          command: sudo gem install bundler:2.4.12
      - run:
          name: Bundle install
          command: |
            bundle config set --local path 'vendor/bundle'
            bundle install

  unit_test:
    parameters:
      build_variant:
        type: string
    steps:
      - run:
          name: Unit test
          command: |
            if [ $IS_SKIPPING_VRT = "false" ]; then
              roborazzi_option="-Proborazzi.test.compare=true"
            fi
            ./gradlew test<< parameters.build_variant >> $roborazzi_option --stacktrace --parallel --max-workers=4

  save_test_result:
    steps:
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  report_jacoco:
    steps:
      - run:
          name: Report jacoco
          command: ./gradlew jacocoTestReport
      - run:
          name: Zip jacoco report
          command: zip -r jacocoTestReport.zip ./build/reports/jacoco/jacocoTestReport/html
      - store_artifacts:
          path: jacocoTestReport.zip

  setting_git_config:
    steps:
      - run:
          name: Setting git config
          command: |
            git config --global user.name "$GITHUB_NAME"
            git config --global user.email "$GITHUB_EMAIL"

  push_screenshots_branch:
    steps:
      - setting_git_config
      - run:
          name: Push screenshots branch
          command: |
            git push origin --delete screenshots_$CIRCLE_BRANCH || true
          
            git checkout --orphan screenshots_$CIRCLE_BRANCH
            git rm --cached -rf .
          
            add_files=$(find . -type f -path "./app/build/outputs/roborazzi/*")
            for file in $add_files; do
              git add -f $file
            done
          
            echo $(date +%s) > timestamp
            git add -f timestamp
          
            echo -e "version: 2.1\njobs:\n no-op:\n  machine: true\n  steps:\n  - run: no-op\nworkflows:\n build:\n  jobs:\n   - no-op:\n      filters:\n       branches:\n        only: no-op" > .circleci/config.yml
            git add -f .circleci/config.yml
          
            git commit -m "Add screenshot"
            git clean -df
            git push origin HEAD:screenshots_$CIRCLE_BRANCH -f

  push_compare_branch:
    steps:
      - setting_git_config
      - run:
          name: Push compare branch
          command: |
            if [ $IS_SKIPPING_VRT = "false" ]; then
              git push origin --delete compare_$CIRCLE_BRANCH || true
            
              fileSize=$(echo $(find ./app/build/outputs/roborazzi -type f | grep -e '.*_compare.png' | wc -l | sed -e 's/ //g'))
              echo "fileSize: $fileSize"
              if [ $fileSize -ne 0 ]; then
                git checkout --orphan compare_$CIRCLE_BRANCH
                git rm --cached -rf .
            
                add_files=$(find . -type f -path "./app/build/outputs/roborazzi/*" -name "*_compare.png")
                for file in $add_files; do
                  git add -f $file
                done
            
                echo -e "version: 2.1\njobs:\n no-op:\n  machine: true\n  steps:\n  - run: no-op\nworkflows:\n build:\n  jobs:\n   - no-op:\n      filters:\n       branches:\n        only: no-op" > .circleci/config.yml
                git add .circleci/config.yml
            
                git commit -m "Add screenshot diff"
                git clean -df
                git push origin HEAD:compare_$CIRCLE_BRANCH -f
              fi
            fi

  comment_screenshot_diff:
    steps:
      - run:
          name: Create comment
          command: |
            echo "Snapshot diff report" > comment
            echo "| File name | Image |" >> comment
            echo "|-------|-------|" >> comment
            
            files=$(find . -type f -path "./app/build/outputs/roborazzi/*" -name "*_compare.png")
            for file in $files; do
              fileName=$(basename "$file" | sed -r 's/(.{20})/\1<br>/g')
              echo "| [$fileName](https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/blob/compare_$CIRCLE_BRANCH/$file) | ![](https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/blob/compare_$CIRCLE_BRANCH/$file?raw=true) |" >> comment
            done
      - run:
          name: Comment screenshot diff
          command: |
            if [ $IS_SKIPPING_VRT = "false" ]; then
              prNumber=$(echo $CIRCLE_PULL_REQUEST | sed "s:.*/::")
              url="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/issues/${prNumber}/comments"
              commentId=$(echo -n $(curl -s -H "Authorization: token $GITHUB_ACCESS_TOKEN" $url -v | jq '.[] | select(.body | test("^Snapshot diff report.*")) | .id'))
              failedComment="$(echo -e "Snapshot diff report\n:warning: **Failed to show Snapshot diff**\n$CIRCLE_BUILD_URL")"
              
              if [ -n "$commentId" ]; then
                comment="$(cat ./comment)"
                endpoint="/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/issues/comments/$commentId"
                gh api --method PATCH -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $endpoint -f body="$comment" ||
                gh api --method PATCH -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $endpoint -f body="$failedComment"
              else
                gh pr comment "$CIRCLE_PULL_REQUEST" -F ./comment || gh pr comment "$CIRCLE_PULL_REQUEST" -b "$failedComment"
              fi
            fi

  cleanup_old_branch:
    parameters:
      prefix:
        type: string
      maximum_seconds_past:
        type: integer
        default:  2592000 # 30 days
    steps:
      - run:
          name: Cleanup old branch
          command: |
            git branch -r --format="%(refname:lstrip=3)" | grep << parameters.prefix >> | while read -r branch; do
              last_commit_date_timestamp=$(git log -1 --format=%ct "origin/$branch")
              now_timestamp=$(date +%s)
              if [ $((now_timestamp - last_commit_date_timestamp)) -gt << parameters.maximum_seconds_past >> ]; then
                git push origin --delete "$branch"
              fi
            done || true

  app_distribution:
    parameters:
      build_variant:
        type: string
    steps:
      - run:
          name: Decode files
          command: |
            echo "$BASE64_KEYSTORE" | base64 -d > app/keystore.jks
            echo "$BASE64_KEYSTORE_PROPERTIES" | base64 -d > app/keystore.properties
            echo "$BASE64_DISTRIBUTION_JSON_FILE" | base64 -d > firebase-app-distribution.json
      - run:
          name: Build apk
          command: ./gradlew assemble<< parameters.build_variant >>
      - store_artifacts:
          path: app/build/outputs/apk
      - run:
          name: Build aab
          command: ./gradlew bundle<< parameters.build_variant >>
      - store_artifacts:
          path: app/build/outputs/bundle
      - run:
          name: Upload apk to Firebase App Distribution
          command: ./gradlew appDistributionUpload<< parameters.build_variant >>
      - slack/notify:
          event: fail
          template: basic_fail_1

jobs:
  dependencies:
    executor: android
    steps:
      - checkout
      - set_locale_properties
      - restore_and_save_gradle_cache

  lint:
    executor: android
    steps:
      - checkout
      - set_locale_properties
      - restore_and_save_gradle_cache
      - setup_bundle
      - run:
          name: Android lint
          command: ./gradlew lint --parallel --max-workers=4
      - run:
          name: Ktlint check
          command: ./gradlew ktlintCheck --continue --parallel --max-workers=4
      - run:
          name: Run danger file
          command: bundle exec danger --verbose --dangerfile="Dangerfile-lint"
      - slack/notify:
          event: fail
          template: basic_fail_1

  unit_test:
    executor: android
    steps:
      - checkout
      - check_is_skipping_vrt
      - get_screenshots
      - set_locale_properties
      - restore_and_save_gradle_cache
      - setup_bundle
      - unit_test:
          build_variant: ProdDebug
      - save_test_result
      - report_jacoco
      - run:
          name: Run danger file
          command: bundle exec danger --verbose --dangerfile="Dangerfile-test"
      - push_compare_branch
      - comment_screenshot_diff
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  compile_mock:
    executor: android
    steps:
      - checkout
      - set_locale_properties
      - restore_and_save_gradle_cache
      - run:
          name: Build mock
          command: ./gradlew compileMockDebugSource --parallel --max-workers=4
      - slack/notify:
          event: fail
          template: basic_fail_1

  save_screenshots:
    executor: android
    steps:
      - checkout
      - set_locale_properties
      - restore_and_save_gradle_cache
      - run:
          name: Create screenshots
          command: ./gradlew recordRoborazziProdDebug --stacktrace
      - push_screenshots_branch
      - cleanup_old_branch:
          prefix: compare_
      - cleanup_old_branch:
          prefix: screenshots_
          maximum_seconds_past: 15552000 # 180 days
      - slack/notify:
          event: fail
          template: basic_fail_1

  app_distribution:
    executor: android
    steps:
      - checkout
      - set_locale_properties
      - restore_and_save_gradle_cache
      - app_distribution:
          build_variant: ProdRelease

workflows:
  test:
    jobs:
      - dependencies
      - lint:
          context: slack-secrets
          requires:
            - dependencies
      - unit_test:
          context: slack-secrets
          requires:
            - dependencies
      - compile_mock:
          context: slack-secrets
          requires:
            - dependencies
      - save_screenshots:
          context: slack-secrets
          requires:
            - dependencies
          filters:
            branches:
              only:
                - main
                - develop
      - app_distribution:
          context: slack-secrets
          requires:
            - lint
            - unit_test
          filters:
            branches:
              only:
                - main
                - develop

# ■ note ■
# check command： circleci config validate
